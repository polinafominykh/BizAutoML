import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import streamlit as st
import pandas as pd

from core.preprocessing import preprocess_data
from core.task_detector import detect_task_type
from core.model_selector import select_model
from core.trainer import train_model
from core.visualizer import plot_regression, plot_classification, plot_feature_importance
from core.exporter import (
    save_model,
    save_predictions,
    save_metrics,
    save_all_as_zip,
    generate_pdf_report
)

st.set_page_config(page_title="BizAutoML", layout="wide")
st.title("üìä BizAutoML ‚Äî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π ML-–∞–Ω–∞–ª–∏–∑ –¥–ª—è –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞")

file = st.file_uploader("üóÇÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª", type=["csv"])

if file:
    df = pd.read_csv(file)
    st.subheader("üëÅÔ∏è‚Äçüó®Ô∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
    st.dataframe(df.head())

    target = st.selectbox("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é", df.columns)

    if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑"):
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏..."):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
            X, y, scaler, encoders = preprocess_data(df, target)
            task = detect_task_type(y)
            model = select_model(task)
            model, metric = train_model(model, X, y, task)
            y_pred = model.predict(X)

        st.success(f"‚úÖ –¢–∏–ø –∑–∞–¥–∞—á–∏: {task}")
        st.info(f"üìà –ú–µ—Ç—Ä–∏–∫–∞ –º–æ–¥–µ–ª–∏: {metric}")

        st.subheader("üìâ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        if task == "regression":
            plot_regression(y, y_pred)
        elif task == "classification":
            plot_classification(y, y_pred)

        plot_feature_importance(model, X.columns)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        save_model(model)
        save_predictions(y, y_pred)
        save_metrics(metric)

        # PDF –æ—Ç—á—ë—Ç
        pred_df = pd.DataFrame({"Actual": y, "Predicted": y_pred})
        pdf_path = generate_pdf_report(task, metric, df.head(), pred_df)
        with open(pdf_path, "rb") as f:
            st.download_button(
                label="üìù –°–∫–∞—á–∞—Ç—å PDF-–æ—Ç—á—ë—Ç",
                data=f,
                file_name="BizAutoML_report.pdf",
                mime="application/pdf"
            )

        # ZIP –∞—Ä—Ö–∏–≤
        zip_path = save_all_as_zip()
        with open(zip_path, "rb") as f:
            st.download_button(
                label="üóÇÔ∏è –°–∫–∞—á–∞—Ç—å –≤—Å—ë –≤ ZIP",
                data=f,
                file_name="BizAutoML_results.zip",
                mime="application/zip"
            )

        st.subheader("üíæ –≠–∫—Å–ø–æ—Ä—Ç")
        st.markdown("- üîê –ú–æ–¥–µ–ª—å: `output/model.joblib`")
        st.markdown("- üìÑ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: `output/predictions.csv`")
        st.markdown("- üìä –ú–µ—Ç—Ä–∏–∫–∏: `output/metrics.json`")
        st.markdown("- üìù –û—Ç—á—ë—Ç: `output/report.pdf`")
